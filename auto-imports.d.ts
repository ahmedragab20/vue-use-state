/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const ComputedRef: typeof import('@vue/reactivity')['ComputedRef']
  const Ref: typeof import('@vue/reactivity')['Ref']
  const computed: typeof import('@vue/reactivity')['computed']
  const disposeState: typeof import('./src/index')['disposeState']
  const getState: typeof import('./src/index')['getState']
  const getStates: typeof import('./src/index')['getStates']
  const isReactive: typeof import('@vue/reactivity')['isReactive']
  const isReadonly: typeof import('@vue/reactivity')['isReadonly']
  const isRef: typeof import('@vue/reactivity')['isRef']
  const isShallow: typeof import('@vue/reactivity')['isShallow']
  const reactive: typeof import('@vue/reactivity')['reactive']
  const readonly: typeof import('@vue/reactivity')['readonly']
  const ref: typeof import('@vue/reactivity')['ref']
  const resetStates: typeof import('./src/index')['resetStates']
  const shallowReactive: typeof import('@vue/reactivity')['shallowReactive']
  const shallowReadonly: typeof import('@vue/reactivity')['shallowReadonly']
  const shallowRef: typeof import('@vue/reactivity')['shallowRef']
  const toRef: typeof import('@vue/reactivity')['toRef']
  const toRefs: typeof import('@vue/reactivity')['toRefs']
  const useState: typeof import('./src/index')['useState']
}
// for type re-export
declare global {
  // @ts-ignore
  export type { Ref, ComputedRef } from '@vue/reactivity'
  import('@vue/reactivity')
}
